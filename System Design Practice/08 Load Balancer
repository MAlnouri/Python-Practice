Steps:
1. pick a worker to foward request
    random
    round robin
    least busy
    stick session / cookies
    by request parameters
2. wait for its response
3. forward the response to client


Load balancers distribute incoming client requests to computing resources such as application servers and databases
in each case, load balancer returns the response from the computing resource to the appropriate client
load balancers are effective at:
    preventing requests from going to unhealthy servers
    preventing overloading resources
    helping to eliminate a single point of failure

load balancers can be implemented with hardware (expensive) or with software such as HAProxy

additional benefits include:
    SSL termination - decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations
      removes need to install X.509 certs on each server
    session persistence - issue cookies and route a specific client's requests to same instance if the web apps do not keep track of sessions

to protect against failures, its common to set up multiple load balancers
either in active-passive or active-active mode

load balancers can route traffic based on various metrics including:
  Random
  Least loaded
  Session/cookies
  Round robin or weighted round robin

  Layer 4
    look at info at the transport layer to decide how to distribute requests
    this involves source, destination IPs, ports in the header but not contents of the packet
    they forward network packets to and from the upstream server, performing Network Address Translation (NAT)

  Layer 7
    look at the application layer to decide how to distribute requests
    can involve the header, message and cookies
    they terminate network traffic, read the message, make a LB decision then open a connection to selected server
    ex: can direct video traffic to servers that host videos while directing more sensitive user billing traffic to security-hardened servers

at the cost of flexibility, layer 4 LB requires less time and computing resources than layer 7
but performance impact can be minimal on modern commodity hardware

LBs can also help with horizontal scaling, improving performance and availability
  disadvantages: horizontal scaling
    introduces complexity and involves cloning servers
      servers should be stateless: should not contain user related data like sessions or profile pics
      sessions can be stored in centralized data store like a db(SQL, NoSQL) or persistent cache(Redis, Memcached)

  disadvantages: load balancer
    lb can become performance bottleneck if it does not have enough resources or not configured properly
    introducting lb to help eliminate a single point of failure results in increased complexity
    single lb is a single point of failure, configuring multiple lbs further increases complexity